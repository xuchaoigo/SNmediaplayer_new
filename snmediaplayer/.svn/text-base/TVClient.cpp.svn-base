//tvclient.cpp
//
#include <sys/ipc.h>
#include <sys/msg.h>
#include <net/if.h>
#include <netinet/ip_icmp.h>
#include <netinet/icmp6.h>
#include "StreamMediaPlayer.h"


int keep_alive()//to acr keep alive
{
	#define DEFDATALEN  56
	#define MAXIPLEN 60
	#define MAXICMPLEN 76
	#define PING_SERVER  "3000::1"

	struct icmp6_hdr *pkt;
	int sendlen;
	/* keep alive socket */
	struct sockaddr_in6 pingaddr;
	char packet[DEFDATALEN + MAXIPLEN + MAXICMPLEN];

	char gw[16];
	int sockopt,keepsock;
	struct sockaddr addr;
	memset(&addr, 0, sizeof(struct sockaddr));
	keepsock = socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);

	memset(&pingaddr, 0, sizeof(struct sockaddr_in));

	pingaddr.sin6_family = AF_INET6;
	if (inet_pton(AF_INET6, PING_SERVER,gw ) != 1){
		perror("inet_pton");
		printf("CmpJoin : inet_pton err\n");
		return -1;
	}
	memcpy(&pingaddr.sin6_addr,gw, sizeof(pingaddr.sin6_addr));

	pkt = (struct icmp6_hdr *) packet;
	memset(pkt, 0, sizeof(packet));
	pkt->icmp6_type = ICMP6_ECHO_REQUEST;

	sockopt = offsetof(struct icmp6_hdr, icmp6_cksum);
	
	if(-1==setsockopt(keepsock, SOL_RAW, IPV6_CHECKSUM, (char *) &sockopt,
			   sizeof(sockopt)))
	 {
	 	close(keepsock);
	       perror("setsockopt error");
		return -1;
	 }
	

	sendlen = sendto(keepsock, packet, sizeof(packet), 0,
			   (struct sockaddr *) &pingaddr, sizeof(struct sockaddr_in6));

	printf("ping server sendlen %d server is %s\n",sendlen,PING_SERVER);
	close(keepsock);

	return 0;
}

#if 0
int StreamMediaPlayer::getchannel_bykey()
{
	int tmpchannel=-1;
	if(num_key.index>0)
	{
		tmpchannel=atoi(num_key.numstr);
		if((tmpchannel*10>tv_info_flist->tvlistnum)||(time(NULL)>=num_key.lastnumkeytime+2))
		{
			memset(num_key.numstr,0,5);
			num_key.index=0;
			return tmpchannel;
		}
		else
			return -1;
	}
	else
		return -1;
}
int StreamMediaPlayer::process_numkey(int keyvalue)
{
	printf("process_numkey*****key is %d\n",keyvalue);
	num_key.lastnumkeytime=time(NULL);
	num_key.numstr[num_key.index]=(keyvalue-DSP_KEY_1+1)%10+'0';
	num_key.index++;
	int tmpchannel=atoi(num_key.numstr);

	UI_JD_disappear(NULL);
	UI_JD_display(STATE_TV_CHANNEL, tmpchannel, NULL);
	return 0;
}


/*获取频道号即0-tvlist_num*/
int StreamMediaPlayer::GetChannel(char *name)
{
	int i ;
	
	if(!name)
		return -1;
//	printf("get channel^^^^^^^^\n");
	if(net_conf_tv.ip_version == IPV6)
	{
		
		for( i = 0; i < tv_info_flist->tvlistnum; i++)
		{
			//printf("v6 ip=%s tv_info_flist->channelinfo[i].multicastip.multicastip_v6 %s\n",name,tv_info_flist->channelinfo[i].multicastip.multicastip_v6);
			if(strcmp(name, tv_info_flist->channelinfo[i].multicastip.multicastip_v6)==0)
			{
				return i;
			}
		}
		return -1;//组播地址不在列表中，认为出错
	
	}
	if(net_conf_tv.ip_version == IPV4)
	{
		//printf("v4 ip=%s\n",name);
		for(i= 0; i < tv_info_flist->tvlistnum; i++)
		{
			if(strcmp(name, tv_info_flist->channelinfo[i].multicastip.multicastip_v4))
			{
	//			printf("GetChannel:V4 Channel is %d\n",i);
				return i;
			}
		}
	//	printf("Invalid v4 multicast:%s\n",name);
		return -1;//组播地址不在列表中，认为出错
	
	}
	return -1;
}
#endif

int StreamMediaPlayer::Join_Multicast(int keepalive)
{
	int ret;

	//printf("\nJoin_Multicast begin ...... \n");

	if(net_conf_tv.multicatip == NULL) 
		return -1;
	
	if(keepalive)
	{
		for(int i;i<3;i++)
		{
			keep_alive();
		}
	}
	
	ret = MldJoin(net_conf_tv.multicatip);

	return 0;
}

int StreamMediaPlayer::Leave_Ipv6_Multicast()
{
	int ret;
	
	if(net_conf_tv.multicatip == NULL) 
		return -1;
	
	ret = MldDone(net_conf_tv.multicatip);
	return 0;
}


int StreamMediaPlayer::Get_Addr (const char *hostname,
          const char *service,
          int         family,
          int         socktype,
          int *sockfd, struct sockaddr_storage *addr)
{
    	struct addrinfo hints, *res, *ressave;
    	int n, retval;

    	retval = -1;

    	memset(&hints, 0, sizeof(struct addrinfo));
    	hints.ai_family = family;
    	hints.ai_socktype = socktype;

    	n = getaddrinfo(hostname, service, &hints, &res);

    	if (n <0) {
       	fprintf(stderr,"getaddrinfo error:: [%s]\n",gai_strerror(n));
       	return retval;
    	}

    	ressave = res;

 	*sockfd=-1;
    	while (res) 
    	{
       	*sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
	
       	if (!(*sockfd < 0)) 
       	{        	
			if (bind(*sockfd, res->ai_addr, res->ai_addrlen) == 0) 
       	     	{
       	     	    memcpy(addr, res->ai_addr, sizeof(*addr));
       	     	    retval=0;
       	     	    break;
       	     	}
			perror("cannot bind");

       	     	close(*sockfd);
       		*sockfd = -1;
       	}
        
       	res=res->ai_next;
    	}
	freeaddrinfo(ressave);

	return retval;
}
          
int StreamMediaPlayer::JoinGroup(int sockfd, int loopBack, int mcastTTL,struct sockaddr_storage *addr)
{
    	int r1, r2, r3, retval;

    	retval=-1;

    	switch (addr->ss_family) {
       	case AF_INET: {
            		//struct ip_mreq      mreq;//the class has the union of ip_mreq and ipv6_mreq

            		net_conf_tv.mreq.mreq4.imr_multiaddr.s_addr=
                		((struct sockaddr_in *)addr)->sin_addr.s_addr;
            		net_conf_tv.mreq.mreq4.imr_interface.s_addr= INADDR_ANY;

            		r1= setsockopt(sockfd, IPPROTO_IP, IP_MULTICAST_LOOP,
                           &loopBack, sizeof(loopBack));
            		if (r1<0)
                		perror("joinGroup:: IP_MULTICAST_LOOP:: ");

            		r2= setsockopt(sockfd, IPPROTO_IP, IP_MULTICAST_TTL,
                           &mcastTTL, sizeof(mcastTTL));
            		if (r2<0)
               		perror("joinGroup:: IP_MULTICAST_TTL:: ");

            		r3= setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP,
                           (const void *)&net_conf_tv.mreq.mreq4, sizeof(net_conf_tv.mreq.mreq4));
            		if (r3<0)
                		perror("joinGroup:: IP_ADD_MEMBERSHIP:: ");

        		} break;

        	case AF_INET6: {
           		memcpy(&(net_conf_tv.mreq.mreq6.ipv6mr_multiaddr),
                  		&(((struct sockaddr_in6 *)addr)->sin6_addr),
                  	sizeof(struct in6_addr));

           		net_conf_tv.mreq.mreq6.ipv6mr_interface= if_nametoindex("eth0");//add by zxy 10.3//0; // cualquier interfaz

	    		if((r1= setsockopt(sockfd, IPPROTO_IPV6, IPV6_MULTICAST_IF, &(net_conf_tv.mreq.mreq6.ipv6mr_interface),sizeof(net_conf_tv.mreq.mreq6.ipv6mr_interface)))<0)
				perror("IPV6_MULTICAST_IF");
           		r1= setsockopt(sockfd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, 
                          &loopBack, sizeof(loopBack));
           		if (r1<0)
               		perror("joinGroup:: IPV6_MULTICAST_LOOP:: ");

           		r2= setsockopt(sockfd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, 
                          &mcastTTL, sizeof(mcastTTL));
           		if (r2<0)
               		perror("joinGroup:: IPV6_MULTICAST_HOPS::  ");

           		r3= setsockopt(sockfd, IPPROTO_IPV6,
                          IPV6_ADD_MEMBERSHIP, &(net_conf_tv.mreq.mreq6), sizeof(net_conf_tv.mreq.mreq6));
           		if (r3<0)
             			perror("joinGroup:: IPV6_ADD_MEMBERSHIP:: ");

        		} break;

        	default:
            	r1=r2=r3=-1;
    	}

    	if ((r1>=0) && (r2>=0) && (r3>=0))
        	retval=0;

    	return retval;
}

int StreamMediaPlayer::IsMulticast(struct sockaddr_storage *addr)
{
   	int retVal;

    	retVal=-1;

    	switch (addr->ss_family) {
        	case AF_INET: {
            		struct sockaddr_in *addr4=(struct sockaddr_in *)addr;
            		retVal = IN_MULTICAST(ntohl(addr4->sin_addr.s_addr));
        		} break;

        	case AF_INET6: {
            		struct sockaddr_in6 *addr6=(struct sockaddr_in6 *)addr;
            		retVal = IN6_IS_ADDR_MULTICAST(&addr6->sin6_addr);
        		} break;

        	default:
           		break;
    	}

    	return retVal;
}


int StreamMediaPlayer::Init_Multicast()
{
	struct linger tv_linger={0};
	int opt;
	//hanhb 04 10
	struct timeval timer;
	struct sockaddr_storage addr;
	int addrlen;
	struct sockaddr_storage clientaddr;
	socklen_t clientaddrlen;
	socklen_t  opt_size;
	size_t fstart,fend;

	//udp://@[ff18::101:5a]:8000

	data_sock = -1;
	
	tv_linger.l_onoff =1;
	tv_linger.l_linger =0;
	timer.tv_sec=0;//
	timer.tv_usec=1000;
	cout<<"if multicast aabb "<<if_multicast<<endl;

	fstart=mediaurl.find("udp://@[");
	if (fstart!=string::npos)
	{
		cout<<"if multicast aabbcc "<<if_multicast<<endl;

		fstart+=strlen("udp://@[");
		fend=mediaurl.find("]",fstart);
		cout<<"if multicast aabbccdd "<<if_multicast<<endl;

		if (fend==string::npos)
			return -1;
		
		multicastip = mediaurl.substr(fstart,fend-fstart);
		cout<<"multicastip is "<<multicastip<<endl;
		cout<<"if multicast aabbccee "<<if_multicast<<endl;

		fstart=mediaurl.find("]:",fend);
		if (fstart==string::npos)
			return -1;
		fstart+=strlen("]:");
		port = mediaurl.substr(fstart);
		cout<<"port is "<<port<<endl;
		net_conf_tv.ip_version = IP_IPV6;
	}
	else
	{	
		fstart=mediaurl.find("udp://@");
		if (fstart==string::npos)
		{
			cout<<"udp format is wrong"<<mediaurl<<endl;
			return -1;
		}
		fstart+=strlen("udp://@");
		fend=mediaurl.find(":",fstart);
		if (fend==string::npos)
			return -1;
		
		multicastip = mediaurl.substr(fstart,fend-fstart);
		cout<<"multicastip is "<<multicastip<<endl;

		fstart=mediaurl.find(":",fend);
		if (fstart==string::npos)
			return -1;
		fstart+=strlen(":");
		port = mediaurl.substr(fstart);
		cout<<"port is "<<port<<endl;
		net_conf_tv.ip_version = IP_IPV4;	
	}

	status_network = 1;
	
			
	net_conf_tv.multicatip = (char *)multicastip.c_str();

	addrlen=sizeof(addr);
	memset(&(addr), 0, addrlen);

	printf("net_conf_tv.multicatip %s\n",net_conf_tv.multicatip);
	
	SetQueryMcastaddr(net_conf_tv.multicatip);

	if(net_conf_tv.ip_version == IP_IPV4)
	{
		if(0 != Join_Multicast())
		{
			printf("join_multicast error...\n");
			return -1;
		}
	}

	
	if((Get_Addr(net_conf_tv.multicatip, port.c_str(), PF_UNSPEC, SOCK_DGRAM, &data_sock, &addr))<0)
	{
		printf("get_addr error\n");
		fprintf(stderr, "get_addr error:: could not find multicast "
		"address=[%s] port=[%s]\n", net_conf_tv.multicatip, port.c_str());
		return -1;
	}
	if (IsMulticast(&(addr))<0) 
	{
		close(data_sock);
       	fprintf(stderr,"This address does not seem a multicast address [%s]\n",net_conf_tv.multicatip);
      		return -1;
	}
	

	opt=1;
	if(setsockopt(data_sock,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt))==-1)
	{
		printf("setsockopt SO_REUSEADDR error\n");
		return  -1;
	}
	opt = 0;
    	opt_size = sizeof( opt );

	if( getsockopt(data_sock, SOL_SOCKET, SO_RCVBUF,(void*)&opt, &opt_size ) == -1 )
    	{
       	printf("cannot query socket \n");
    	} 
	opt = 0x1fffe;
	if( setsockopt(data_sock, SOL_SOCKET, SO_RCVBUF,(void *)&opt, sizeof( opt ) ) == -1 )
	{
		printf("setsockopt SO_RCVBUF error\n");
		return  -1;
	}
	opt = 0;
    	opt_size = sizeof( opt );
	if( getsockopt(data_sock, SOL_SOCKET, SO_RCVBUF,(void*)&opt, &opt_size ) == -1 )
    	{
        	printf("cannot query socket \n");
    	}

	printf("socket recv buf size is %d\n",opt);
	 //接收超时设置	
	 
   	if( setsockopt(data_sock, SOL_SOCKET, SO_RCVTIMEO,(void *)&(timer), sizeof(struct timeval) ) == -1 )
        {
		  return -1;	
        }
        
        //设置非阻塞
        //unsigned long ul = 1;
	 //ioctl(data_sock, FIONBIO, (unsigned long*)&ul);
	if (setsockopt(data_sock, SOL_SOCKET, SO_LINGER,(char *)&tv_linger, sizeof(struct linger)) < 0)
	{
		perror("SO_LINGER");
		return -1;
	}

       if (JoinGroup(data_sock, 0 , 8, &(addr)) <0)
       {
       	return -1;
       }

	clientaddrlen=sizeof(clientaddr);

	i_mtu= 1500;

	return 0;
}


int StreamMediaPlayer::Quit_Multicast()
{
//xuc : not used
/*
	if(data_sock == -1)
	{
		printf("socket is -1,just quit\n");
		return -1;
	}
	
	UNSetQueryMcastaddr();
	printf("netconfigure ipversion is %d net_conf_tv.multicatip%s\n",net_conf_tv.ip_version,net_conf_tv.multicatip);
	if(net_conf_tv.ip_version == IPV6)
	{
		if(0!=Leave_Ipv6_Multicast())
		{	
			printf("leave_ipv6_multicast error ... \n");
			return -1;
		}
		if(net_conf_tv.multicatip!=NULL)
		{
			if(setsockopt(data_sock, IPPROTO_IPV6, IPV6_DROP_MEMBERSHIP,&(net_conf_tv.mreq.mreq6), sizeof(net_conf_tv.mreq.mreq6)) < 0)
			{
		       	 perror("setsockopt:IP_DROP_MEMBERSHIP ipv6");
				 for(int i=0;i<16;i++)
				 	printf("%.2x",net_conf_tv.mreq.mreq6.ipv6mr_multiaddr.s6_addr[i]),
				 printf("\n");

		    	} 	
		}
		close(data_sock);
		data_sock = -1;
	}

	else if(net_conf_tv.ip_version == IPV4)
	{
		if(setsockopt(data_sock, IPPROTO_IP, IP_DROP_MEMBERSHIP,&(net_conf_tv.mreq.mreq4), sizeof(net_conf_tv.mreq.mreq4)) < 0)
		{
	       	perror("setsockopt:IP_DROP_MEMBERSHIP");
	    	}
		close(data_sock);
	}

	else
	{
		printf("something about the ip_version error ...\n");
		return -1;
	}
	*/

	return 0;

}

/*****************************************************************************
 * Read: read on a file descriptor, checking b_die periodically
 读取UDP负载
 *****************************************************************************/
int StreamMediaPlayer::UDPRead(unsigned char * p_buffer, unsigned long i_len )
{
 
	int         i_recv = -1;

	i_recv = recv( data_sock, p_buffer, i_len, 0 );
	printf("i_recv %d data_sock %d\n",i_recv,data_sock);
	if( i_recv <= 0 )
	{ 
		i_recv = 0;
	}

    return i_recv;
 
}

int StreamMediaPlayer::RTPRead_n(unsigned char * p_buffer, unsigned long i_len, bool needtimestamp)
{
       static unsigned int now_seq=0,pre_seq=0;
	
	unsigned char *tmp;
	unsigned char     rtp_header[64];//buffer used to back copy data
	unsigned long timestamp_lsb,timestamp_msb;
	RtpHeader          *rtpheader = (RtpHeader *)(rtp_header);
	int  i_ret;

	struct iovec data_vec[2];
	   
	{

		data_vec[0].iov_base = rtp_header;
		data_vec[0].iov_len = rtpheader_len;
		data_vec[1].iov_base = p_buffer;
		data_vec[1].iov_len = i_mtu;
		
		i_ret = readv( data_sock, &(data_vec[0]), 2 );
		
		if(i_ret <= 0)
			return 0;

		if(rtpheader_len>0)
		{
			rtpheader = (RtpHeader *)(rtp_header);						
			now_seq=ntohs(rtpheader->seqnum);

			seqnumber= now_seq;
			
			if(now_seq!=0)
			     if((now_seq-pre_seq)!=1)
			       printf("ts packet,or not the same oder!pre_seq:%u,now_seq:%u\n",pre_seq,now_seq);

			pre_seq=now_seq;	
		}
		if(needtimestamp&&rtpheader_len>0)	 
		{
			timestamp_lsb = ntohl(rtpheader->timestamp);
			
			tmp = rtp_header+sizeof(RtpHeader)+4;
			
			if(rtpheader->extension)
				timestamp_msb = ntohl(*((unsigned long * )tmp));
			else 
				timestamp_msb = 0;
			m_lasttimestamp = U64fromTwo32(timestamp_msb,timestamp_lsb);
			
		}

		return i_ret - rtpheader_len;
	}
	return 0;
}
/*****************************************************************************
 * RTPRead : read from the network, and parse the RTP header
 读取RTP负载
 *****************************************************************************/
int StreamMediaPlayer::RTPRead(unsigned char * p_buffer, unsigned long i_len )
{
       static unsigned int now_seq=0,pre_seq=0;
	unsigned char     p_tmp_buffer[1500];
	int  i_ret;
 //      p_tmp_buffer = alloca(i_mtu );
       
       i_ret = UDPRead(p_tmp_buffer, i_mtu);
	
       if ( i_ret <=0 ) return 0;
	   /*	   
       i_rtp_version  = ( p_tmp_buffer[0] & 0xC0 ) >> 6;
       i_CSRC_count   = ( p_tmp_buffer[0] & 0x0F );
       i_payload_type = ( p_tmp_buffer[1] & 0x7F );
		*/
       now_seq=ntohs(*(short *)(p_tmp_buffer+2));
       now_seq=now_seq&0xffff;
       if(now_seq!=0)
	      if((now_seq-pre_seq)!=1)
	        	printf("ts packet,or not the same oder!pre_seq:%u,now_seq:%u\n",pre_seq,now_seq);

       pre_seq=now_seq;
    	     /*	 	   
       if ( i_rtp_version != 2 )
             printf( "RTP version is %u, should be 2\n\n", i_rtp_version );
       if ( i_payload_type != 33 && i_payload_type != 14 && i_payload_type != 32 )
             printf("unsupported RTP payload type (%u)\n\n", i_payload_type );
	*/
       i_ret -= ( rtpheader_len  );
	
       if ( (unsigned long)i_ret > i_len )
       {
             printf(  "RTP input trashing %ld bytes\n\n", i_ret - i_len );
             i_ret = i_len;
        }
    
	memcpy( p_buffer,p_tmp_buffer + rtpheader_len,i_ret );
	
	return i_ret;
}

/*****************************************************************************
 * Read : read data from the network
 *****************************************************************************/
int StreamMediaPlayer::TVRead(unsigned char * p_buffer, unsigned long i_len )
{
	if(net_conf_tv.packet_type == 0)
		return UDPRead( p_buffer,i_len);
	else if(net_conf_tv.packet_type == 1)
		return RTPRead( p_buffer,i_len);
	printf("wrong read \n");
	return 0;
}

/*****************************************************************************
 * RTPChoose : read from the network, and decide whether it's UDP or RTP
 判断负载是UDP还是RTP报文，选择函数Read与RTPRead
 *****************************************************************************/
int StreamMediaPlayer::RTPChoose(unsigned char * p_buffer, unsigned long i_len )
{
//	int         all_imtu = i_mtu;

	int i_ret;
	RtpHeader *header = NULL;
//	RMuint64 tt;

	//memset(p_tmp_buffer, 0 ,sizeof(p_tmp_buffer));	
	//tt = get_ustime();
	i_ret = recv( data_sock, p_buffer, i_len, 0 );
	if ( i_ret <= 0 ){
		return 0;
    	}

	if ( p_buffer[0] == 0x47 )
	{
        	printf("detected TS over raw UDP\n\n" );
		net_conf_tv.packet_type = 0;
		rtpheader_len = 0;
        	return i_ret;
    	}

    	//if ( p_buffer[0] == 0x80 )
		//printf("p_tmp_buffer[0] == 0x80\n");
		
       /* Parse the header and make some verifications.
           See RFC 1889 & RFC 2250. */
       header = (RtpHeader *)p_buffer;



	net_conf_tv.packet_type = 1;

	if(header->extension)
		rtpheader_len = RTP_HEADER_LEN + 4*(ntohs(*(unsigned short *)(p_buffer + RTP_HEADER_LEN + 2)) + 1);
	else
		rtpheader_len = RTP_HEADER_LEN;
	
	printf("header length %d\n",rtpheader_len);
	
	
	i_ret -= rtpheader_len;

	
	if ( (unsigned long)i_ret > i_len )
	{
		printf("RTP input trashing %ld bytes\n\n", i_ret - i_len );
		i_ret = i_len;
	}

	return i_ret;
}

