#include "StreamMp4Player.h"
#include "ui_display.h"
#include "timer_handler.h"

#define SEND_VIDEO_TRACK 1
#define SEND_AUDIO_TRACK 2
#define SEND_SPU_TRACK   3

#define STARTCODE_BUFOFFSET 16

static rtp_event event;

static void rtp_event_handler(struct rtp *session, rtp_event *e) 
{

}


StreamMp4Player::StreamMp4Player(int instanceid,int videoDisplayMode, int playmode,
	int height, int width, int left, int top, int muteFlag,  int muteuiflag, int subtitleFlag, 	
	int videoAlpha, int cycleFlag, int randomFlag, int autoDelFlag,string json_str,	
	int useNativeUIFlag,int audioVolumeUIFlag,int audioTrackUIFlag,int progressBarUIFlag,	
	int channelNoUIFlag,int allowTrickmodeFlag,int speed,int volume,int pipmode,void *mpobject,
	MediaplayerStateChangeCallback playstate_func)
{
	real_instanceid=instanceid;
	real_json_str=json_str;	
	real_playmode=playmode;
	real_videoDisplayMode=videoDisplayMode;
	real_videoDisplayrect.x=left;
	real_videoDisplayrect.y=top;
	real_videoDisplayrect.height=height;
	real_videoDisplayrect.width=width;
	real_muteflag=muteFlag;//0:  设置为有声 (默认值);1:  设置为静音
	real_nativeUIFlag=useNativeUIFlag;//0: 不使能Player的本地UI显示功能;1: 使能Player的本地UI显示功能 (默认值)
	real_muteUIFlag=muteuiflag;//: 不使能静音提示的本地UI显示功能;1: 使能静音提示的本地UI显示功能（默认值）	
	real_audioVolumeUIFlag=audioVolumeUIFlag;//0: 不使能音量调节的本地UI显示功能;1: 使能音量调节的本地UI显示功能（默认值）
	real_audioTrackUIFlag=audioTrackUIFlag;//0: 不使能音轨选择的本地UI显示功能;1: 使能音轨选择的本地UI显示功能（默认值）
	real_progressBarUIFlag=progressBarUIFlag;//0: 不使能进度条的本地UI显示功能;1: 使能进度条的本地UI显示功能（默认值）	
	real_channelNoUIFlag=channelNoUIFlag;//0: 不使能频道号的本地UI显示功能;1: 使能频道号的本地UI显示功能（默认值）
	real_subtitileFlag=subtitleFlag;//0:	不显示字幕 (默认值);   1:  显示字幕
	real_videoAlpha=videoAlpha;//0－100之间的整数值，0表示不透明，100表示完全透明(默认值为0)
	real_allowTrickmodeFlag=allowTrickmodeFlag;//0－100之间的整数值，0表示不透明，100表示完全透明。(默认值为0)
	real_cycleFlag=cycleFlag;	
	real_randomFlag=randomFlag;
	real_autoDelFlag=autoDelFlag;
	real_speed=speed;//-32,-16,-8,-4,-2,0,...32	
	real_volume=volume;//0-100，表示音量，0为静音，100为最大音量
	real_pipmode=pipmode;
	real_mpobject = mpobject;
	real_playstate_func=playstate_func;
	media_start_time = 0;

	
	//getmediaurlfromjson();
	msgid = msgget(MEDIAPLAYER_QUEUE_KEY,IPC_CREAT|0666);
	Init_StreamMp4Player();
	mediaplayer_thread = 0;
	duration = 0;
	volumesize=volume;

}

StreamMp4Player::~StreamMp4Player()
{

	printf("~StreamMp4Player\n\n");
	if(mediaplayer_thread)
	{
		sendto_mediaplayermsg(STREAMMEDIAPLAYER_QUIT);
		pthread_join(mediaplayer_thread, NULL);
		mediaplayer_thread =0;
	}
	msgctl(msgid,IPC_RMID,NULL);
	Release_Mp4MediaPlayer();
}

void StreamMp4Player::player_setvolume(int volumeindex)
{	
	volumesize = volumeindex;
	printf("StreamMp4Player,volume is %d\n",volumesize);
	sendto_mediaplayermsg(STREAMMEDIAPLAYER_VOLUMECHANGE);
	return;
}

void StreamMp4Player::setAllowTrickmodeFlag (int allowTrickmode)
{
	sallowTrickmode = allowTrickmode;
}

int StreamMp4Player::getmediaurlfromjson()
{
	size_t fstart, fend;
	string tmp_url;
	media_start_time = 0;
	cout<<"in get media url json_str"<<real_json_str<<endl;
	fstart=real_json_str.find("mediaUrl:\"");

	if (fstart!=string::npos)
	{	
		fstart += strlen("mediaUrl:\"");

		fend=real_json_str.find("\"",fstart);
		if (fend!=string::npos)
		{
			
			mediaurl = real_json_str.substr(fstart,fend-fstart);
			vodurl = mediaurl;	

			//获取starttime
			string starttime;
			fstart=mediaurl.find("?start=");
			
			if(fstart!=string::npos)
			{
				vodurl.erase(fstart);
				tmp_url = mediaurl.substr(fstart);	
				fstart += strlen("?start=");
				starttime = mediaurl.substr(fstart,mediaurl.size());
				media_start_time = atoi(starttime.c_str());
			}			
			
			cout<<"vodurl is "<<vodurl<<"media_start_time is "<<media_start_time<<endl;
			return 0;
		}
	}
	return -1;
}

int StreamMp4Player::playFromStart()
{
	cout<<"real_json_str"<<real_json_str<<endl;
	if(mediaplayer_thread == 0)
	{   
		getmediaurlfromjson();
		pthread_create(&mediaplayer_thread,NULL,( void *(*)(void*))StreamMp4Player::mp4_player_thread,this);
	}
	else
	{
		sendto_mediaplayermsg(STREAMMEDIAPLAYER_SEEK);
	}
	return 0;
}

int StreamMp4Player::playByTime(int type, int timestamp,int speed)
{
	playspeed = speed;
	if(mediaplayer_thread == 0)
	{	 	
		getmediaurlfromjson();
		pthread_create(&mediaplayer_thread,NULL,( void *(*)(void*))StreamMp4Player::mp4_player_thread,this);
	}
	else
	{
		sendto_mediaplayermsg(STREAMMEDIAPLAYER_SEEK);
	}
	return 0;
}

int StreamMp4Player::joinChannel(int userchannelid, string& json_str)
{
	return 0;
}

int StreamMp4Player::leaveChannel()
{
	return 0;
}
int StreamMp4Player::pause()
{
	sendto_mediaplayermsg(STREAMMEDIAPLAYER_PAUSE);
	return 0;
}

int StreamMp4Player::fastForward(int speed)
{
	playspeed = speed;
	sendto_mediaplayermsg(STREAMMEDIAPLAYER_FASTFORWARD);
	return 0;
}

int StreamMp4Player::fastRewind(int speed)
{
	playspeed = speed;
	sendto_mediaplayermsg(STREAMMEDIAPLAYER_FASTBACKWARD);
	return 0;
}

int StreamMp4Player::resume()
{
	//playspeed = 1;
	sendto_mediaplayermsg(STREAMMEDIAPLAYER_PLAY);
	return 0;
}

int StreamMp4Player::gotoEnd()
{
	return 0;
}

int StreamMp4Player::gotoStart()
{
	return 0;
}

int StreamMp4Player::stop()
{
	sendto_mediaplayermsg(STREAMMEDIAPLAYER_QUIT);
	pthread_join(mediaplayer_thread, NULL);
	mediaplayer_thread = 0;
	real_playstate_func(real_mpobject, RTSP_STATUS_END_OF_STREAM, NULL);
	return 0;
}


int StreamMp4Player::setSingleMedia(string mediaStr)
{
	real_json_str = mediaStr;
	getmediaurlfromjson();

	if(mediaplayer_thread == 0)
	{	
		getmediaurlfromjson();
		printf("@@mediaplayer_thread in stream mediaplayer\n");
		pthread_create(&mediaplayer_thread,NULL,( void *(*)(void*))StreamMp4Player::mp4_player_thread,this);
	}
	else	
	{
		sendto_mediaplayermsg(STREAMMEDIAPLAYER_URLCHANGE);
	}
	return 0;
}

int StreamMp4Player::player_setwindowparms(int top, int left, int width, int height)
{
	printf("real_videoDisplayMode %d\n",real_videoDisplayMode);
	if(real_videoDisplayMode == 1)//全屏显示
	{
		real_videoDisplayrect.x = 0;
		real_videoDisplayrect.y = 0;
		real_videoDisplayrect.width = DFB_OSD_WIDTH;
		real_videoDisplayrect.height = DFB_OSD_HEIGHT;
	}
	else
	{
		real_videoDisplayrect.x = top;
		real_videoDisplayrect.y = left;
		real_videoDisplayrect.width = width;
		real_videoDisplayrect.height = height;
	}

	if(!top&&!left&&!width&&!height)
	{
		real_videoDisplayrect.x = 0;
		real_videoDisplayrect.y = 0;
		real_videoDisplayrect.width = DFB_OSD_WIDTH;
		real_videoDisplayrect.height = DFB_OSD_HEIGHT;
	}
	
	Set_Player_Window();
	return 0;
}

void StreamMp4Player::Set_Player_Window()
{
	DSPRect rect;
	
	rect.x = real_videoDisplayrect.x*PLAYER_Full_Win_WIDTH/DFB_OSD_WIDTH;
	rect.y = real_videoDisplayrect.y*PLAYER_Full_Win_HEGHT/DFB_OSD_HEIGHT;
	rect.width = real_videoDisplayrect.width*PLAYER_Full_Win_WIDTH/DFB_OSD_WIDTH;
	rect.height = real_videoDisplayrect.height*PLAYER_Full_Win_HEGHT/DFB_OSD_HEIGHT;

	printf("aa @@@@@@@@@@@@rect x%d, y%d w%d h%d\n",rect.x, rect.y, rect.width, rect.height);
	//printf("tsplayerHandle is %d pplayerwindow x%d, y%d w%d h%d\n",TSPlayerHandle,pplayerwindow->x, pplayerwindow->y, pplayerwindow->width, pplayerwindow->height);
	DSP_MP4Player_Setlocation(Mp4PlayerHandle, rect.x, rect.y, rect.width, rect.height);
	printf("bbbbbbbbbbbbbb@@@@@@@@@@@@rect x%d, y%d w%d h%d\n",rect.x, rect.y, rect.width, rect.height);

	return;
}

int StreamMp4Player::switchAudioChannel()
{
	return 0;	
}

int StreamMp4Player::switchAudioTrack()
{
	return 0;	
}

int StreamMp4Player::switchSubtitle()
{
	return 0;	
}

int StreamMp4Player::getMediaDuration()
{
	printf("duration is %f\n",duration);
	return duration;
}
unsigned long StreamMp4Player::getCurrentPlayTime()
{
	printf("playing_time is %lu\n",playing_time);
	return playing_time;
}

char * StreamMp4Player::getPlaybackMode()
{
	
	switch(playerstate)
	{
		case PLAYERSTATE_PAUSED:
			playbackmode = "{PlayMode:\"Pause\",Speed:1x}";
			break;
			
		case PLAYERSTATE_FASTBACKWARD:
			playbackmode = "{PlayMode:\"TrickMode\",Speed:";
			if(playspeed==-2)
				playbackmode.append("-2x}");
			else if(playspeed==-4)
				playbackmode.append("-4x}");
			else if(playspeed==-8)
				playbackmode.append("-8x}");
			else if(playspeed==-16)
				playbackmode.append("-16x}");
			else if(playspeed==-32)
				playbackmode.append("-32x}");
			//playbackmode = "{TrickMode:\"Pause\",Speed:-4x}";
			break;
			
		case PLAYERSTATE_FASTFORWARD:
			playbackmode = "{PlayMode:\"TrickMode\",Speed:";
			if(playspeed==2)
				playbackmode.append("2x}");
			else if(playspeed==4)
				playbackmode.append("4x}");
			else if(playspeed==8)
				playbackmode.append("8x}");
			else if(playspeed==16)
				playbackmode.append("16x}");
			else if(playspeed==32)
				playbackmode.append("32x}");
			//playbackmode = "{TrickMode:\"Pause\",Speed:4x}";
			break;
			
		default:
			playbackmode = "{PlayMode:\"Normal Play\",Speed:1x}";
			break;
	}

	cout<<"playback mode"<<playbackmode<<endl;
	return (char *)playbackmode.c_str();
	
}


int StreamMp4Player::Release_Mp4MediaPlayer()
{
	printf("Release_StreamMediaPlayerRelease_StreamMediaPlayer %d\n",status_decoder);
	Quit_Unicast();

	if(status_decoder == 1)
	{
		DSP_MP4Player_Close(Mp4PlayerHandle);
		status_decoder = 0;
	}

	/*xuc*/
	//DSP_graphics_resumeBackGround();
	return 0;
}

int StreamMp4Player::getChannelNum()
{
	return 0;
} 

int StreamMp4Player::clean_socketdata ()
{
	int i;
	RC.rtspPAUSE();
	char buffer_tmp[1500];
	int j =0;
	for(i = 0; i<500; i++)
	{
		if(rtp_recv(session,buffer_tmp,&event) <=0)
			j ++;
		else 
			j = 0;
		if(j >= 50)
			break;
	}
	return 0;

}

//处理单播时的消息
void StreamMp4Player::process_unicast_msg(int cmd, PLAYERProcess_cmd_goto *gotocmd)
{	

	switch(cmd)																    
	{																		    
		case STREAMMEDIAPLAYER_QUIT:
			printf("got quit msg in unicast\n");
			rt_value = RET_PLAYER_QUIT;
			*gotocmd = PLAYERProcess_cmd_goto_cleanup;
			break;
			
		case  STREAMMEDIAPLAYER_PAUSE:														    
			if(RC.rtspnowPAUSE() == -1)                                                                    
			{
				rt_value = RET_PLAYER_LOCAL;
				*gotocmd = PLAYERProcess_cmd_goto_cleanup;		
			}	
			else
			{
				DSP_MP4Player_Pause(Mp4PlayerHandle);
				playerstate = PLAYERSTATE_PAUSED;			                                                                                                                      
			}
			break;
		case  STREAMMEDIAPLAYER_PLAY:						                                                               
			cout<<"STREAMMEDIAPLAYER_PLAY play time is "<<playing_time<<endl;
			if(playerstate == PLAYERSTATE_PAUSED)
			{
				//clean_socketdata();
				if(RC.rtspresumePlay() == -1)                                                        
				{
					rt_value = RET_PLAYER_LOCAL;
					*gotocmd = PLAYERProcess_cmd_goto_cleanup;	  
					break;
				}	
				DSP_MP4Player_Play(Mp4PlayerHandle, DSPPlaymode_PlayFwd, 1);
			}
			else if((playerstate == PLAYERSTATE_FASTBACKWARD)||(playerstate == PLAYERSTATE_FASTFORWARD))
			{
				if(RC.rtspnowPAUSE() == -1)                                                                    
				{
					rt_value = RET_PLAYER_LOCAL;
					*gotocmd = PLAYERProcess_cmd_goto_cleanup;	
					break;
				}	
				clean_socketdata();
				cout<<"after stop playing time is "<<playing_time<<endl;
				if(RC.rtspPLAY(playing_time) == -1)                                                        
				{
					rt_value = RET_PLAYER_LOCAL;
					*gotocmd = PLAYERProcess_cmd_goto_cleanup;	
					break;
				}	
				media_start_time=playing_time;
				initrecv_session(session);
				*gotocmd = PLAYERProcess_cmd_goto_rstart;
			}				
			playerstate = PLAYERSTATE_PLAYING;	
			playspeed=1;
			break;	
			
		case STREAMMEDIAPLAYER_URLCHANGE:															 								 
			Quit_Unicast();															 
			DSP_MP4Player_Pause(Mp4PlayerHandle);			
			Init_Unicast();	
			if(RC.rtspPLAY(media_start_time) == -1)                                                        
			{
				rt_value = RET_PLAYER_LOCAL;
				*gotocmd = PLAYERProcess_cmd_goto_cleanup;	                                                                                         
			}	
			else
			{
				initrecv_session(session);
				*gotocmd = PLAYERProcess_cmd_goto_rstart;
			}
			break;
														
			
		case STREAMMEDIAPLAYER_FASTBACKWARD: 
			clean_socketdata();	
			cout<<"backward playspeed is "<<playspeed<<endl;
			cout<<"playing_time is "<<playing_time<<endl;
			if(RC.rtspVcrRequest(playspeed + SPEED_OFFSET,playing_time) == -1)                                    
			{	
				*gotocmd = PLAYERProcess_cmd_goto_cleanup;	
			}	
			else
			{
				printf("ok!!\n");
				initrecv_session(session);		
				playerstate = PLAYERSTATE_FASTBACKWARD;
				*gotocmd = PLAYERProcess_cmd_goto_rstart;	
			}
			break;	
			
		case STREAMMEDIAPLAYER_FASTFORWARD: 
			clean_socketdata();	
			cout<<"forward playspeed, "<<playspeed<<",playing_time is"<<playing_time<<endl;
			
			if(RC.rtspVcrRequest(playspeed + SPEED_OFFSET,playing_time) == -1)                                    
			{	
				*gotocmd = PLAYERProcess_cmd_goto_cleanup;	
			}	
			else
			{
				initrecv_session(session);	
				playerstate = PLAYERSTATE_FASTFORWARD;
				*gotocmd = PLAYERProcess_cmd_goto_rstart;	
			}
			break;														 
	}	

	return;
}
int StreamMp4Player::PlayerRecvStopKey()
{
	int msgtype;
	int ret = rcvfrom_mediaplayermsg(&msgtype); 
	
	if(ret >=0 && (msgtype == STREAMMEDIAPLAYER_QUIT))
		return 1;
	else
		return 0;
}

void StreamMp4Player::process_common_msg(int *cmdtype, int *processed)
{
	int ret;
	
	ret = rcvfrom_mediaplayermsg(cmdtype);

	if(ret < 0) {
		return;
	}

	printf("recv a msg %d\n",*cmdtype);
	switch (*cmdtype)
	{
		case STREAMMEDIAPLAYER_VOLUMECHANGE:
			if( (volumesize>MAX_VOLUME_SIZE)||(volumesize<MIN_VOLUME_SIZE))
				break;

			ret=DSP_MP4Player_SetVolumeIndex(Mp4PlayerHandle,volumesize*2);
			printf("process_common_msg,vol is %d,ret is%d\n",volumesize,ret);

			*processed  = 1;
			break;
			
		case STREAMMEDIAPLAYER_VOLUMEMUTE:
			DSP_MP4Player_SetVolumeIndex(Mp4PlayerHandle,MIN_VOLUME_SIZE);
			
			*processed  = 1;
			break;

		default:
			break;
	}
		
	return;
}

int StreamMp4Player::rcvfrom_mediaplayermsg(int *cmd, char *data)
{
	int ret=0;
	memset(&recvmsg,0,sizeof(recvmsg));
	ret=msgrcv(msgid, &recvmsg, sizeof(recvmsg)-sizeof(long), 0,IPC_NOWAIT);
	if(ret!=-1)
	{
		printf("Rcv_Msg %ld ret %d\n",recvmsg.mtype,ret);

		*cmd = recvmsg.mtype;
		printf("recv to id %d cmd %d\n",msgid,*cmd);

		if(ret)
		{
			memcpy(data,recvmsg.mdata,ret);
			data[ret]=0;
		}
	}

	return ret;
}

int StreamMp4Player::sendto_mediaplayermsg(int cmd,char *data, int datalen)
{
	int status = 0;
	int sendlen;
	
	memset(sendmsg.mdata,0,sizeof(sendmsg.mdata));

	sendlen = (datalen>MAX_MESSAGE_LEN)?MAX_MESSAGE_LEN:datalen;
	if(sendlen)
		memcpy(sendmsg.mdata,data,sendlen);

	sendmsg.mtype = cmd;

	printf("send to id %d cmd %d\n",msgid,cmd);
	status =  msgsnd(msgid, &sendmsg, sendlen, IPC_NOWAIT);
	if(status == -1)
	{
		perror("Send_Cmd_Browser:msgsnd");
		return 0;
	}
	return 1;
}

int StreamMp4Player::Init_StreamMp4Player()
{

	Init_JD_Handler();
	prebuf_max = 512*1024;
	volumesize= real_volume;
		
	status_decoder = status_network =0;

	getmediaurlfromjson();

	if(Init_Unicast()==-1)
	{
		SetLastEvent(RTSP_CONNECT_FAILED);
		real_playstate_func(real_mpobject,RTSP_CONNECT_FAILED, NULL);
		return -1;
	}
	
	if(mp4parameter.is_aac)
	{
		configinfo.atype = DSPAudio_AAC;
	}
	else
	{
		configinfo.atype = DSPAudio_MPEG;
		configinfo.audiosamplerate = AAC_SampleRateFromDSI;
	}

	if(mp4parameter.is_264)
	{
		configinfo.vtype= DSPVideo_H264;
	}
	else
	{
		configinfo.vtype= DSPVideo_MP4;
	}
	configinfo.audiotimescale = mp4parameter.audiotimescale;
	configinfo.videotimescale = mp4parameter.videotimescale;
	
	memcpy(configinfo.configaudio, mp4parameter.configaudio, sizeof(configinfo.configaudio));
	memcpy(configinfo.configvideo, mp4parameter.configvideo, sizeof(configinfo.configvideo));

	configinfo.videodsisize = mp4parameter.videodsisize;
	configinfo.audiodsisize= mp4parameter.audiodsisize;

	/*初始化解码器*/
	if(DSP_MP4Player_Open(&Mp4PlayerHandle,&configinfo) != DSPFP_OK)
	{
		printf("open player failed \n");
		SetLastEvent(STATUS_NO_VIDEO);
		real_playstate_func(real_mpobject,STATUS_NO_VIDEO, NULL);
		return -1;	
	}

	status_decoder = 1;


	DSP_graphics_unSetBackGround();
	return 0;	
		
}

int StreamMp4Player::GetLastError()
{
	return eventtype;
}


int StreamMp4Player::SetLastEvent(	MediaPlayErrorType inerrortype)
{
	eventtype = inerrortype;
	return 0;
}

int StreamMp4Player::Init_Unicast()
{
	char data[RTP_MAX_PACKET_LEN];	 
	rtp_packet *rpacket = (rtp_packet *)data;
	int rtpReceivePort = VOD_PORTBASE+2*(porttimes%20);//12400?12500

	//test code
	//vodurl = "rtsp://192.168.100.115/sample_300kbit.mp4";

	cout<<"vodurl is "<<vodurl<<endl;
	
	if(RC.run((unsigned  char *)vodurl.c_str(), rtpReceivePort, ISMA,&mp4parameter,true)<0)
		return -1;
	
	duration = RC.get_duration();
	session = rtp_init(mp4parameter.host_addr, mp4parameter.video_rx_port, mp4parameter.video_tx_port, mp4parameter.video_ssrc,16, 64000,rtp_event_handler, NULL);	
	if(!session)
		return -1;

	if(!mp4parameter.is_aac)
	{
		 int data_len,get_audio=0;
		 unsigned long long start;
		 mpeg_frame_struct mp3frame;
		 char * ptr;
		 
		 printf("mp3 audio audio ss %ld video %ld\n",mp4parameter.audio_ssrc,mp4parameter.video_ssrc);
 
		 if(RC.rtspPLAY(0) < 0)
		 {
			 printf("cannot play,quit \n");
			 return -1;
		 }
 
		 start = time(NULL);
 
		 do
		 {
			 data_len = rtp_recv(session, data,&event);
			 if(data_len > 0)
			 {
				 if(rpacket->ssrc == mp4parameter.audio_ssrc)
				 {
					 get_audio = 1;
					 printf("a\n");
				 }
				 else if(rpacket->ssrc == mp4parameter.video_ssrc)
				 {
					 printf("v\n");
				 }
		 
			 }
			 if(time(NULL)-start >= 5)
			 {
				 printf("5s last ,but can not find audio,just use default samplerate:44100\n");
				 break;
			 }
		 }while(!get_audio);
	 
		 RC.rtspPAUSE();
 
		 if(get_audio)
		 {
			 ptr = (rpacket->data + 4);//skip 4 bytes we got the data
			 mp3frame.header=(ptr[0]<<24)|(ptr[1]<<16)|(ptr[2]<<8)|ptr[3];
			 parse_mp3header(&mp3frame);
			 if(!mp3frame.valid)
			 {
				 AAC_SampleRateFromDSI = 44100;
			 }
			 else
				 AAC_SampleRateFromDSI = mp3frame.sampling;
			 if(AAC_SampleRateFromDSI == 24000)
				 AAC_SampleRateFromDSI = 48000;
			 printf("sample rate get from the first audio %d\n",AAC_SampleRateFromDSI);
 
		 }
		 
	 }
	porttimes ++;
	status_network = 1;

	printf("init oke Init_Unicast\n");
	return 0;
}

int StreamMp4Player::Quit_Unicast()
{

	RC.rtspTEARDOWN();

	/*destroy rtp client */
	/* Say bye-bye */
	if(session)
	{
		rtp_send_bye(session);
		rtp_done(session);
		session = NULL;
	}
	
	RC.cleanup();
	status_network = 0;
	return 0;
}


void StreamMp4Player::init_play()
{
	firsttime_a = 1;
	firsttime_v = 1;
	//playing_time= RC.get_rtsptime();
	printf("playing_time %f\n",playing_time);
	video_ptsoff = playing_time*configinfo.videotimescale;
	audio_ptsoff = playing_time*configinfo.audiotimescale;
	time_out = time(NULL);
	return;
}

unsigned int StreamMp4Player::check_interleave(rtp_packet * prtppacket)
{
	printf("rcv ssrc is %d video ssrc %d audio ssrc %d\n",prtppacket->ssrc ,mp4parameter.video_ssrc,mp4parameter.audio_ssrc);
	if(prtppacket->ssrc == mp4parameter.video_ssrc)
		return SEND_VIDEO_TRACK;
	else if(prtppacket->ssrc == mp4parameter.audio_ssrc)
		return SEND_AUDIO_TRACK;
	else 
		return 0;

}

void StreamMp4Player::check_prebuffering_state(unsigned int buffersize)
{
	bool quit_prebuf = false;
	static long long start_time;
	
	if (playerstate != PLAYERSTATE_BUFFERING)
		return;
	
	quit_prebuf = ((buffersize == 0) || (prebuf_level >= prebuf_max)) ? true : false;
	prebuf_level += buffersize;
			
	if (quit_prebuf) 
	{
		printf("exit prebuffering state %ld\n", prebuf_level);
		playerstate = PLAYERSTATE_PLAYING;
		DSP_MP4Player_Play(Mp4PlayerHandle, DSPPlaymode_PlayFwd, 1);
	}
		
	return;
}
int StreamMp4Player::send_mp4_audio(rtp_packet *prtp_packet, unsigned char * databuf,  int count)
{
	int payload_length;
	unsigned long timestamp_lsb;
	unsigned long  timestamp_msb;
	DSPFP_RETVALUE retvalue;
 
	/* Receive control and data packets */
	
	//dealing with a packet with many audio frames

	rtp_packet *p= prtp_packet;
	payload_length = p->data_len;

	#if 0
		static unsigned int now_seq = 0,pre_seq = 0;
		now_seq = p->seq;
		if(pre_seq != 0)
		if((now_seq-pre_seq) != 1)
			printf("not the same oder!pre_seq:%u,now_seq:%u\n",pre_seq,now_seq);
	#endif	

	timestamp_lsb = p->ts;
	if(p->extn)
		timestamp_msb = ntohl(*((unsigned long *)(p->extn+4)));
	else 
		timestamp_msb = 0;

	if(!mp4parameter.is_aac)
	{
		audiosample.flags = 0x9;		
		audiosample.CTS_LSB = timestamp_lsb-firstAudioPTS+audio_ptsoff;
		audiosample.CTS_MSB = 0;
		audiosample.size = payload_length-4;
		audiosample.buf = (unsigned char *)(databuf+4);
		payload_length -=4;

		retvalue = DSP_MP4Player_SendAudioData(Mp4PlayerHandle, &audiosample);
		if(retvalue != DSPFP_OK)
			return -1;		
		return 0;
	}
	else
	{
		unsigned long offset = 0;
		unsigned long length;
		unsigned long i;
		
		a_packet.index = 1;
		a_packet.NumPackets = NumPackets = ntohs(*((unsigned short *)(databuf)))>>4;//(*(p->data+1))>>4;//frame number
		if(a_packet.NumPackets == 0)
			a_packet.NumPackets = 1;
		a_packet.bufstart = (unsigned char *)(databuf+(NumPackets+1)*2);
		for(i = 0;i<NumPackets;i++)
			a_packet.AudioFrameSize[i] = ntohs(*((unsigned short *)(databuf+2*i+2)))>>3;
		
		a_packet.timestamp = timestamp_lsb-firstAudioPTS+audio_ptsoff;		

		audiosample.flags  = 0x9;
		audiosample.CTS_MSB = 0;
		audiosample.CTS_LSB = (a_packet.index - 1)*1024 + a_packet.timestamp;
		for(a_packet.index=1;i<=a_packet.NumPackets;a_packet.index++)
		{
			i =0;
			while(i < a_packet.index-1)
			{
				offset += a_packet.AudioFrameSize[i];
				i ++;
			}
			audiosample.buf = a_packet.bufstart + offset;
			audiosample.size =  a_packet.AudioFrameSize[a_packet.index-1];
			retvalue = DSP_MP4Player_SendAudioData(Mp4PlayerHandle, &audiosample);
			if(retvalue != DSPFP_OK)
				return -1;
		}
	}
	
	return 0;
}

int StreamMp4Player::send_mp4_video(rtp_packet *prtp_packet, unsigned char * databuf, int count)
{
	DSPFP_RETVALUE retvalue;
	
	int payload_length;
	unsigned long timestamp_lsb;
	unsigned long  timestamp_msb;
	
	rtp_packet *p= prtp_packet;
	payload_length = p->data_len;
	#if 0
		static unsigned int now_seq = 0,pre_seq = 0;
		now_seq = p->seq;
		if(now_seq != 0)
		if((now_seq-pre_seq) != 1)
			printf("not the same oder!pre_seq:%u,now_seq:%u\n",pre_seq,now_seq);
		pre_seq = now_seq;
	#endif	

	timestamp_lsb = p->ts;
	if(p->extn)
		timestamp_msb = ntohl(*((unsigned long *)(p->extn+4)));
	else 
		timestamp_msb = 0;

		
	//u_lasttimestamp = U64fromTwo32(timestamp_msb,timestamp_lsb);	
	//pre_seq = now_seq;
	videosample.CTS_LSB = timestamp_lsb-firstVideoPTS+video_ptsoff;
	videosample.CTS_MSB = 0;
	videosample.size = payload_length;

	if(!mp4parameter.is_264)
	{
		videosample.buf = databuf;
		retvalue = DSP_MP4Player_SendVideoData(Mp4PlayerHandle, &videosample);
		if(retvalue != DSPFP_OK)
		{
			printf("send mp4 video fialed\n");
			return -1;
		}

		printf("send mp4 video ok\n");

	}
	else
	{

		unsigned short  data_off, nal_size;
		unsigned char nal_type, nal_unit_type,nal_nri;


		//264 data processed, we should delimit the nalu with fixed bit stream
		// 0x00000001,so we should deal with the rtp payload accordingly
		nal_type = *(databuf);
		if(nal_type&0x80)
		{
			 //bit error or syntax error in the rtp payload,drop it
			printf("bit err\n");
			p = NULL;
			return 0;			 
		}


		nal_nri = (nal_type&0x60)>>5;
		//printf("nal nri %d\n",nal_nri);
		nal_unit_type = nal_type&0x1f;
		if(nal_unit_type <= 23 )
		{
			 //unit type from 0 to 23, is a single NAL unit packet
			 //add 00000001 head
			 videosample.buf = (unsigned char *)(databuf-4);
			 videosample.buf[0] = (unsigned char)(0x00000001 >> 24) & 0xff;
			 videosample.buf[1] = (unsigned char)(0x00000001 >> 16) & 0xff;
			 videosample.buf[2] = (unsigned char)(0x00000001 >> 8) & 0xff;
			 videosample.buf[3] = (unsigned char)(0x00000001) & 0xff;
			 videosample.size += 4;
			
			retvalue = DSP_MP4Player_SendVideoData(Mp4PlayerHandle, &videosample);
			if(retvalue != DSPFP_OK)
				return -1;

		}
		else
		{
			unsigned short payload_off;
			char FUtype,s,e;
			switch(nal_unit_type )
			{
				case 24:			
				//Single-time aggregation packet A type
					payload_off = 1;//exclude the type data
					do
					{
						unsigned char * nal_ptr = databuf+ payload_off;
						nal_size = (nal_ptr[0]&0x000000ff)<<8|(nal_ptr[1]&0x000000ff);
			
						if(nal_size > 1500)
						{
							printf("too long nal size %d something must be wrong\n",nal_size);
							p = NULL;
							return 0;
						}
						
						//send_h264_startcode(pSendContext);
						videosample.buf = (unsigned char  *)(databuf+ payload_off+2-4);
						videosample.size = nal_size;
						videosample.buf[0] = (unsigned char)(0x00000001 >> 24) & 0xff;
						videosample.buf[1] = (unsigned char)(0x00000001 >> 16) & 0xff;
						videosample.buf[2] = (unsigned char)(0x00000001 >> 8) & 0xff;
						videosample.buf[3] = (unsigned char)(0x00000001) & 0xff;
						videosample.size  += 4;

						retvalue = DSP_MP4Player_SendVideoData(Mp4PlayerHandle, &videosample);
						if(retvalue != DSPFP_OK)
							return -1;
						payload_off += nal_size+2;

					}while(payload_off < p->data_len);
					break;

				case 28:
					//FU-As.
					FUtype = *(databuf + 1);
					s = FUtype&0x80;
					e = FUtype&0x40;
					if(s)
					{	
						//send_h264_startcode(pSendContext);
						videosample.buf = (unsigned char *)(databuf + 1);
						videosample.size = p->data_len-1;
						videosample.buf[0] = (FUtype&0x1f)|nal_type&0x000000e0;
						videosample.buf -= 4;
						videosample.buf[0] = (unsigned char)(0x00000001 >> 24) & 0xff;
						videosample.buf[1] = (unsigned char)(0x00000001 >> 16) & 0xff;
						videosample.buf[2] = (unsigned char)(0x00000001 >> 8) & 0xff;
						videosample.buf[3] = (unsigned char)(0x00000001) & 0xff;

						 videosample.size += 4;
					}
					else
					{
						videosample.buf = (unsigned char *)(databuf + 2);
						videosample.size = p->data_len-2;
					}
						
					retvalue = DSP_MP4Player_SendVideoData(Mp4PlayerHandle, &videosample);
					if(retvalue != DSPFP_OK)
						return -1;
						
					break;
					
				default:
						
					printf("not supported nal_unit_type yet %d\n ",nal_unit_type);
					printf("0x%.2x 0x%.2x  0x%.2x  0x%.2x \n",*(databuf),*(databuf+1),*(databuf+2),*(databuf+3));
				
				}
		}
	}


	return 0;
}


//处理消息接口
PLAYERProcess_cmd_goto StreamMp4Player::process_tvod_msg()
{
	PLAYERProcess_cmd_goto gotocmd = PlAYERProcess_cmd_goto_none;
	int  cmd = STREAMMEDIAPLAYER_NONE;
	int processed =0;
//	int getkey =0;//是否需要处理键值

	//处理通用消息，
	process_common_msg(&cmd, &processed);   

	if(processed)
		return gotocmd;

	process_unicast_msg(cmd, &gotocmd);
	

	//printf("cmd is %d gotocmd %d\n",cmd,(int)gotocmd);

	return gotocmd;
}



void StreamMp4Player::main_mp4_player()
{
	int basetime,getpara_basetime=0;		
	buf_info tsplayer_buf;
	DSPFP_RETVALUE dspfp_rt_value;
	PLAYERProcess_cmd_goto gotocmd;
	rtp_packet *rpacket;

	unsigned int i = 0;		
	unsigned int trackToSend;
	int ret;
	int need_resetdemuxinfo=0;

	/*add for monitor decoder*/
	struct timeval now;	
	static struct timeval last;	
	//static struct timeval last_stc;	


	if(RC.rtspPLAY(media_start_time) == -1)
	{
		SetLastEvent(RTSP_CONNECT_FAILED);
		real_playstate_func(real_mpobject,RTSP_CONNECT_FAILED, NULL);
		return;
	}
	
	init_play();
	playerstate = PLAYERSTATE_PLAYING;
	duration= mp4parameter.duration;
	DSP_MP4Player_SetVolumeIndex(Mp4PlayerHandle,volumesize*2);

main_loop:

	need_resetdemuxinfo = 1;

restart:
mainloop_noseek:
		
	gettimeofday(&now, NULL);
	gettimeofday(&last, NULL);
	//gettimeofday(&last_stc, NULL);
	time_out = time(NULL);
	//many args, not over
	
	videoEOS = 0;
	audioEOS = 0;
	
	prebufferingDone = 0;
	


	DSP_MP4Player_Reset(Mp4PlayerHandle,DSPStopmode_LastFrame);
	if (need_resetdemuxinfo)
	{
		printf("need_resetdemuxinfo\n");
		if((playerstate == PLAYERSTATE_FASTBACKWARD)||(playerstate == PLAYERSTATE_FASTFORWARD))
			DSP_MP4Player_Play(Mp4PlayerHandle,DSPPlaymode_PlayIFrame,trickmode_id);
		else
			DSP_MP4Player_Play(Mp4PlayerHandle,DSPPlaymode_PlayFwd,1);		
	}
	else
	{
		if((playerstate == PLAYERSTATE_FASTBACKWARD)||(playerstate == PLAYERSTATE_FASTFORWARD))
			DSP_MP4Player_Play(Mp4PlayerHandle,DSPPlaymode_PlayIFrame,trickmode_id);
		else
		{
			DSP_MP4Player_Play(Mp4PlayerHandle,DSPPlaymode_PlayFwd,1);
			DSP_MP4Player_Pause(Mp4PlayerHandle);
			playerstate = PLAYERSTATE_BUFFERING;
			prebuf_level = 0;
		}
	}
	need_resetdemuxinfo = 0;
		printf("need_resetdemuxinfo 1111\n");

	while(1)
	{
		basetime=time(NULL);
		while(1) 
		{
			dspfp_rt_value=DSP_MP4Player_GetBuffer(Mp4PlayerHandle,&tsplayer_buf.bufsize,&(tsplayer_buf.buf));
			if(DSPFP_OK==dspfp_rt_value)
				break;

			ret=PlayerRecvStopKey();
			if(ret)
				goto cleanup;

			if(time(NULL)-basetime>GET_BUFFER_TIMEOUT)//????
			{
				printf("get buffer data err\n");
				//ShowErrorInfo(p_media->window_parms.fullwindow,VodGetErrorString());
				goto cleanup;
			}
			usleep(10000);
		}					

		printf("get buffer ok\n");
		basetime=time(NULL);
		while(1)
		{
			gotocmd = process_tvod_msg();
			PROCESS_MSG_RESULT(gotocmd);

			tsplayer_buf.count = rtp_recv(session, (char *)(tsplayer_buf.buf+STARTCODE_BUFOFFSET),&event);
			if(!tsplayer_buf.count)
			{
				//after 4's still no data received,quit
				if((time(NULL)-basetime>= 10) && (playerstate !=PLAYERSTATE_PAUSED))
				{
					printf("nodata 4\n");
					if(duration - playing_time >= 5)								
					{
						Quit_Unicast();
						if(Init_Unicast()!=-1)
						{
							RC.rtspPLAY(playing_time);
							media_start_time=playing_time;
							goto main_loop;
						}
					}
					goto cleanup;

				}
				continue;
			}
			break;
		}

		printf("rtp_recvr ok %d\n",tsplayer_buf.count);
		rpacket= (rtp_packet *)(event.data);

		trackToSend = check_interleave(rpacket);

		printf("trackToSend %d\n",trackToSend);
		if (trackToSend == SEND_VIDEO_TRACK) {
		
			if(send_mp4_video(rpacket, tsplayer_buf.buf+STARTCODE_BUFOFFSET,tsplayer_buf.count) == -1) {
				goto cleanup;
			}
		}
		else if (trackToSend == SEND_AUDIO_TRACK) {
			if(send_mp4_audio(rpacket, tsplayer_buf.buf+STARTCODE_BUFOFFSET,tsplayer_buf.count) == -1) {
				goto cleanup;
			}
		}
		
		check_prebuffering_state(tsplayer_buf.count);
														
	
		DSP_MP4Player_ReleaseBuffer(Mp4PlayerHandle,tsplayer_buf.buf);

		gettimeofday(&now, NULL);
		rtp_send_ctrl(session, &now);	

	}
		
cleanup:

	printf("goto cleanup\n");
	UI_JD_displaytime_disappear();
	UI_JD_disappear(NULL);
	DSP_MP4Player_ReleaseBuffer(Mp4PlayerHandle,tsplayer_buf.buf);
	return;
}

