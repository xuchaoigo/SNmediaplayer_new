#################################################
#
# $@:   目标文件
# $^:   所有的依赖文件
# $<:   第一个依赖文件.
#
# author:       gaochao
# email:        gaoc@dsp.ac.cn
# date:         2009/03/24
#################################################

NEXUS_TOP := $(shell cd ~/7405/nexus; pwd)
include $(NEXUS_TOP)/platforms/$(PLATFORM)/build/platform_app.inc

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#		 need complete
#
# {exe(default), static, shared}
BINARY_TYPE := exe

MODULE := vodapp

LFLAGS := -L$(NEXUS_TOP)/bin -lnexus 

LFLAGS += -lpthread -lm
LFLAGS += -L../src  -lvod_ipqam

CFLAGS := -Wall -MD -O2 
CFLAGS += -I../include
CFLAGS += -DLINUX \
	-D_FILE_OFFSET_BITS=64 \
	-D_LARGEFILE_SOURCE \
	-D_LARGEFILE64_SOURCE \
	-DBSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE \
	-DUCLIBC_VERSION=\"libuClibc-0.9.29.so\" \
	-DBDBG_DEBUG_BUILD \
	-D_GNU_SOURCE=1 \
	-Wno-unused-value \
	-pipe \
	-Wall \
	-W \
	-mips32 

# This is the minimum needed to compile and link with Nexus
CFLAGS += $(addprefix -I,$(NEXUS_APP_INCLUDE_PATHS)) $(addprefix -D,$(NEXUS_APP_DEFINES)) -I$(NEXUS_TOP)/../BSEAV/lib/netaccel/include

#
#		     done
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#


ifeq ($(BINARY_TYPE), static)
	TARGET = $(addsuffix .a, $(addprefix lib, $(MODULE)))
else
ifeq ($(BINARY_TYPE), shared)
	TARGET = $(addsuffix .so, $(addprefix lib, $(MODULE)))
endif
endif

TARGET ?= $(MODULE)

.PHONY: all
all: createdir $(TARGET)
	chmod a+x $(TARGET)
	@echo "-------- $(TARGET) done ---------"

SOURCES_C := $(wildcard *.c)
SOURCES_CPP := $(wildcard *.cpp)

OBJS_C := $(patsubst %.c, %.o, $(SOURCES_C))
OBJS_CPP := $(patsubst %.cpp, %.o, $(SOURCES_CPP))

OBJS := $(OBJS_C) $(OBJS_CPP)

OBJDIR := .objs

ifeq ($(TEST_SUPPORT), y)
CROSS_COMPILE := 
else
CROSS_COMPILE := mipsel-linux-
endif

AS := $(CROSS_COMPILE)as
LD := $(CROSS_COMPILE)ld
CC := $(CROSS_COMPILE)gcc

CXX := $(CROSS_COMPILE)g++
AR := $(CROSS_COMPILE)ar

MKDIR := mkdir -p
RM := rm -rf

.PHONY: createdir
createdir: 
	$(MKDIR) $(OBJDIR)

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $(OBJDIR)/$@ 

%.o: %.cpp
	$(CXX) $(CFLAGS) -c $< -o $(OBJDIR)/$@ 

$(TARGET): $(OBJS)
ifeq ($(BINARY_TYPE), static)
	$(AR) rc $@ $(addprefix $(OBJDIR)/, $^)
else
ifeq ($(BINARY_TYPE), shared)
	$(CC) -shared -o $@ $(addprefix $(OBJDIR)/, $^)
else
	$(CXX) -o $@ $(addprefix $(OBJDIR)/, $^) $(LFLAGS)
endif
endif

.PHONY: clean
clean:
	$(RM) $(TARGET)
	$(RM) $(OBJDIR)

